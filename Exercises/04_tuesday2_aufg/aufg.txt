Aufgabe Dienstagnachmittag
--------------------------

(1) Sehen Sie sich den Quelltext aufg1.cpp an. Dieser benutzt den Algorithmus
    "std::count_if" um zu zählen, wieviele Ganzzahlen in einem klassischen
    C-Array einen Wert ungleich 0 haben.

    Verändern Sie den Code so, dass an Stelle einer Funktion zum Bedingungstest
    (a) ein Funktor verwendet wird
    (b) ein Lambda verwendet
    
=== Hinweis für die folgenden Aufgabenteile 2 bis 5:
    Man kann in dieser Aufgabenserie an einigen Stellen auch den
    "std::copy"-Algorithmus nutzbringend verwenden, nämlich
	- in allen Aufgabenteilen bei der Ausgabe und
	- ab Aufgabenteil (3) auch bei der Eingabe.
    Sie müssen aber den copy-Algorithmus nicht zwingend verwenden sondern können
    die Ein- und Ausgabe auch in konventionellen Schleifen lesen bzw. erzeugen.

(2) Schauen Sie sich zunächst in einer Online-Hilfe (z.B. en.cppreference.com)
    die Beschreibung des STL-Algorithmus "next_permutation" an.

    Schreiben Sie ein Programm, welches die Ganzzahlen 1 bis 4 in allen
    möglichen Anordnungen ausgibt. Zur besseren Kontrolle der Vollständigkeit
    sollen die Ausgabezeilen mit einer laufenden Nummer versehen werden:
	 1: 1 2 3 4
	 2: 1 2 4 3
	 3: 1 3 2 4
	    ...
	    ...
	23: 4 3 1 2
	24: 4 3 2 1
    Hinweis: Die Anzahl der Permutationen "n" unterschiedlicher Elemente beträgt
    n-Fakultät (n!), im Falle von vier (verschiedenen) Elementen also 24.
    
    Legen Sie zunächst die vier zum Test verwendeten Ganzzahlen in einem C-Array
    ab:
       int data[4] = { 1, 2, 3, 4 };
    Um STL-Algorithmen mit einem C-Array zu verwenden, müssen Sie Zeiger
    übergeben, wo Iteratoren erwartet werden. Im obigen Beispiel also &data[0]
    und &data[4] (oder wahlweise data und data+4) als "begin-" und
    "end-Iterator".
    Hinweis: Falls Sie Bedenken wegen des Konstrukts &data[4] haben: der ZUGRIFF
    auf data[4] gehört in der Tat in den Bereich von "undefiniertem Verhalten",
    aber nur diese ADRESSE zu ermitteln ist legal - es ist die nächste
    Speicherzelle HINTER dem Array data und damit genau das, was ein typischer
    STL-Algorithmus als "End-Punkt" (Iterator) erwartet.

(3) Schreiben Sie das Programm aus Teil (1) so um, dass es statt der Zahlen 1..4
    alle Permutationen der Worte im Satz "das ist mein haus" ausgibt. Sie können
    weiterhin ein fest initialisiertes Array verwenden:
	std::string data[4] = { "das", "ist", "mein", "haus" };
    Verifizieren Sie, dass als Ausgabe ebenfalls alle 24 Möglichkeiten zu sehen
    sind - wenn es weniger sind, dann klären Sie warum und beheben Sie das
    Problem.

    FRAGE: Wie müsste man das Programm ändern, damit man bei der Definition der
    Variablen data auf die Angabe einer Dimension verzichten kann (also	nur ein
    leeres Paar eckiger Klammern) und sich die ANZAHL der Worte allein durch
    eine veränderte Initialisierung bestimmen ließe?

    Hinweis: die entscheidende Anpassung dort erfolgen, wo bisher an die
    Algorithmen &data[4] (bzw. data+4) übergeben wurde.	Sie müssen erreichen,
    dass statt der festen Zahl 4 dort AUTOMATISCH die Anzahl der zur
    Initialisierung verwendeten Elemente eingesetzt wird. (Die Lösung erfordert
    übrigens weder Wissen zur STL noch zu C++, es geht hier um eine auch in C
    häufig angewendete Technik!)
    
--- Zusatzaufgabe für besonders Schnelle

(4) Ändern Sie das Programm aus Teil (2) so ab, dass die Worte nicht mehr fest
    vorgegeben sind, sondern beliebig viele Worte eingegeben werden können, für
    die dann alle Anordnungen gezeigt werden, die möglich sind.

    TIPP: Es ist jetzt NICHT mehr sinnvoll, ein C-Array zu verwenden, besser
    ist folgendes:
	vector<string> data;
    Entsprechend ändern sich die Übergabe-Parameter (Iteratoren	statt Zeiger),
    oder konkreter:
	- an Stelle von &data[20] (oder einfach nur data) muss dann data.begin()
	  stehen;
	- an Stelle von &data[20] (oder data+20) muss dann data.end() stehen.
        
    Hinweis: Falls Sie die Tests für diese Aufgabe automatisieren möchten, können
    Sie das Hauptprogramm aus der Datei aufg4-tdd.cpp verwenden. Bitte sehen Sie
    sich aber an, zu welchen EINGABEN hier welche AUSGABEN erwartet werden. Es gibt
    nämlich zwei Möglichkeiten, wie man mit einer beliebigen Eingabe von
    "next_permutation" in jedem Fall ALLE Permutationen zu sehen bekommt. Im
    Aufgabenteil 3 sollten Sie bereits auf dieses Problem gestoßen sein.

(5) Ändern Sie das Programm aus Aufgabenteil 4 noch einmal, so dass es die
    Permutationen der Worte ausgibt, die in EINER Zeile eingegeben wurden.
    Anschließend soll eine neue Eingabezeile gelesen und sämtliche Permutationen
    der DARIN enthaltenen Wort ausgegeben werden usw. (Beendet werden soll das
    Programmende durch Eingabe einer Leerzeile.)

    HINWEIS: Verwenden Sie zum Lesen ALLER Worte EINER Zeile die Funktion
    std::getline(), Initialisieren Sie mit dem als std::string gelesenen Inhalt
    einer Zeile ein Objekt vom Typ std::istringstream und extrahieren sie aus
    diesem wiederum die einzelnen Worte, wahlweise mit dem Operator ">>" wie
    üblich oder mit dem copy-Algorithmus.
    
 
