=== 00_content.html ===

  2 | Agenda._[]
  3 | Zur Kursunterlage
  4 |    Aktuelle C++-Implementierungen
  5 |    Struktur der Schulungsunterlagen
  6 |       Online-Referenzen
  7 |       Präsentations-Seiten
  8 |       Fußnoten
  9 |       Beispiel-Code
 10 |          Code-Fragmente
 11 |          Code-Fragmente (2)
 12 |          Kompilierbarer Code
 13 |          Projekt-Dateien für IDEs
 14 |       Externe Ergänzungen
 15 |    Online-Version
 16 |       HTML-Präsentation
 16 |       Ansicht
 17 |       Ausdruck
 18 |       PDF-Erstellung
 19 |    Info-Grafiken
 20 |       Betrachten von Info-Grafiken
 21 |       Ausdruck von Info-Grafiken
 21 |       Sonstige Verwendung der Info-Grafiken
 22 |    Kursdurchführung in Englisch
 22 |       Unterlagen in Englisch
 23 |       Automatische Übersetzung
 24 |    Private Annotations
 24 |       Annotations to Print Version
 25 |       Annotations to HTML Version



=== 01_monday1.html ===

  2 | Refreshing some C++ Basics
  3 |    Getrennte Kompilierung
  3 |       Grundlagen der getrennten Kompilierung
  4 |       Abhängigkeiten zwischen Header-Files
  5 |       Include-Guards
  6 |       Namespaces
  7 |       Zyklische Abhängigkeiten
  8 |    Definition/Reference-Modell
  9 |    Schreibschutz durch den Compiler (`const`)
 10 | Builtin and Standard Types
 11 |    Basic Integral Types
 12 |    Integral Type Standard Aliases
 12 |       Standard Aliases for Exact Width
 12 |       Standard Aliases for Minimal Size
 12 |       Standard Aliases for Fast Access
 13 |    Floating Point Types
 14 |    `void`, `bool`, and `enum`
 15 |       Not Existing Values: `void`
 16 |       Truth Values: `bool`
 17 |       Packed 0/1 Values
 18 |       Classic Enumerations
 19 |       C++11 Scoped Enumerations
 20 |    Querying Type Properties
 21 | Zeiger und Referenzen
 22 |    Zeiger allgemein und `const`-qualifiziert
 23 |    Klassische Referenzen (Lvalue-Referenzen)
 24 |       Initialisierung von Referenzen
 25 |       Konstante Referenzen
 26 |       Achieving the Const-Correctness
 27 |       Reference Arguments
 28 |    Zeiger versus Referenzen
 29 |    Rvalue-Referenzen
 30 | Variable and Object Initialisation
 31 |    Classic Initialisation Syntax
 32 |       Assignment-like Initialisation
 33 |       Constructor Call Syntax
 34 |       C (inherited) Syntax for Aggregates
 35 |       Uninitialised Variables (of Basic Types)
 36 |       Uninitialised Objects
 37 |    C++11 Brace Initialisation
 38 |    C++11 Direct Member Initialisation
 39 |    C++11: Compile-Time Initialisation (`constexpr`)
 40 |       Compile-Time Initialised Data
 41 |       Compile-Time Callable Functions
 42 | Constructors and Destructors
 43 |    General Purpose of Constructors and Destructors
 44 |    (No) Memory Allocation in Constructors
 45 |    Memory of Variable Size at Run-Time
 46 |    Compile Time vs. Run Time Sizing
 47 |    (No) Memory De-Allocation in Destructors
 48 |    Precautions in Memory Allocating Classes
 49 |       Alternative Design with "Self-Contained" Helper Class
 50 |       Simplifying Clients with Self-Contained Members
 51 |    Exceptions in Constructors and Destructors
 52 |       Throwing from Constructors
 53 |       Throwing from Destructors
 54 |    Re-Using Constructors
 55 |       Constructor Delegation
 56 |          Constructor Delegation Example
 57 |          Constructor Delegation and Exceptions
 58 |       Constructor Inheritance
 59 | Static Polymorphism
 60 |    Überladen von Funktionen
 61 |       Überladen bei Parametern mit ohne `const`
 62 |    Überladen von Operatoren
 63 |       Operator-Überladung mit freistehender Funktion
 64 |       Operator-Überladung mit Member-Funktion
 65 |       Überladung von Kopier-Konstruktor und -Zuweisung
 66 |       Überladung von Move-Konstruktor und -Zuweisung
 67 |       Implementierung von Move-Konstruktor/Zuweisung
 68 |       Unterscheidung Copy- und Move-Versionen
 69 |    Defaultwerte für Argumente
 70 |    Overloading and Overriding
 71 |       Overriding Example (1)
 72 |       Overriding Example (2)
 73 |       Overriding and the `using` Directive
 74 | Typ-Kompatibilität und -Konvertierungen
 75 |    Typ-Kompatibilität bei grundlegenden Typen
 76 |       Typ-Kompatibilität bei grundlegenden Typen (2)
 77 |    Typ-Kompatibilität und Vererbung
 78 |       Öffentliche Basisklassen und LSP
 79 |       Private Basisklassen (kein LSP)
 80 |    Typ-Konvertierung mittels *Cast*
 81 |       Typ-Konvertierung mit `static_cast`
 82 |       Typ-Konvertierung mit `dynamic_cast`
 83 |       Typ-Konvertierung mit `const_cast`
 84 |       Typ-Konvertierung mit `reinterpret_cast`
 85 |       Typ-Konvertierung mit `reinterpret_cast` (Beispiel 1)
 86 |       Typ-Konvertierung mit `reinterpret_cast` (Beispiel 2)
 87 |    Klassenspezifische Typ-Konvertierungen
 88 |       Typ-Konvertierungen durch Konstruktoren
 89 |       Anwendung von Konstruktoren zur Typ-Konvertierung
 90 |       Brace Initialisers as Short-Hand Notation
 91 |       Temporäre Objekte im Rahmen der Typ-Konvertierung
 92 |       Typ-Konvertierung durch Type-Cast Operatoren
 93 |       Automatische Anwendung von Type-Cast Operatoren
 94 |       Sonderfall: `explicit operator bool()`
 95 |       Beispiele: `explicit operator bool()`
 96 |    Typ-Sicherheit in C++



=== 02_monday2.html ===

  2 | More C++11/14 Extensions
  3 |    Extensions to Writing Literals
  4 |       Specifying Encoding of Characters
  5 |       Raw String Literals
  6 |       Structuring Numeric Literals for Readability
  7 |       Numeric Literals in Binary Notation
  8 |       User Defined Literals
  9 |       User Defined Literals Example (1)
 10 |       User Defined Literals Example (2)
 11 |       User Defined Literals Example (3)
 12 |       User Defined Literals Example (4)
 13 |    Static Assertions
 14 |       Static Assertion Example
 15 |       Static Assertion Recommendations
 16 |    Explicit `nullptr` Value and Type
 17 |       `nullptr` Example (1)
 18 |       `nullptr` Example (2)
 19 |       Usage Recommendations for `nullptr`
 20 |    Initialiser Lists
 21 |       Initialiser List Example
 22 |       Initialiser List Recommendations
 23 |    `auto`-typed Variables and Objects
 24 |       Examples for `auto`-typed Variables (and Objects)
 25 |       Usage Recommendations for `auto`-typed Variables
 26 |       Intermezzo: `auto` and Brace Initialisation Corner Cases
 27 |       Recommendations for `auto` and Brace Initialisation
 28 |    Trailing Return-Type Syntax
 29 |       Completely Omitted Return-Type
 30 |       Usage Recommendations for Trailing Return Types
 31 |    Range (-based) `for`-Loops
 32 |       Example: Range-For over Classic Array
 33 |       Example: Range-For over STL-Vector
 34 |       Example: Range-For over STL-Map
 35 |       Example: Range-For over Non-Standard Containers
 36 |       Example: Range-For with Initialiser List
 37 |       Usage Recommendations for Range-`for` Loops
 38 |    Alternative for Type Definitions
 39 |       New C++11 Type Aliases Example (1)
 40 |       New C++11 Type Aliases Example (2)
 41 |       New C++11 Type Aliases Example (3)
 42 |       New C++11 Type Aliases Example (3)
 43 |       Usage Recommendations for C++11 Type Aliases
 44 | Basics of Type Deduction
 45 |    Type Deduction … Why and Where
 46 |    Type Deduction for `auto`-Variables
 47 |       Type Deduction unadorned `auto`
 48 |       Type Deduction `auto` and References
 49 |       Type Deduction for `auto` with Adornments
 50 |    Type Deduction for Templates
 51 |       Template Type Deduction Example (1)
 52 |       Template Type Deduction Example (2)
 53 |       Template Type Deduction Example (3)
 54 |    More Type Deduction Scenarios
 55 | Template Basics
 56 |    Parametrisierte Typen
 57 |    Parametrisierte Compilezeit-Konstanten
 58 |    Beispiel `RingBuffer`
 59 | Exception Basics
 60 |    Hierarchien von Exception-Klassen
 61 |    Kontrollfluss mit und ohne Exception
 62 |    Exception Klassen als Label verstanden
 63 |    Gruppieren ähnlicher Exceptions
 64 |    Aktivieren der Behandlungs-Blöcke
 65 |    Unvollständig behandelte Exceptions
 66 |    Fangen aller Exceptions
 67 | Library-Basics – Strings
 68 |    Klassen (Übersicht)
 69 |    Kompatibilität zu C
 70 |       `std::string` als `const char *` verwenden
 71 |       Risiken von `c_str()`
 72 |       `const char *` als `std::string` verwenden
 73 |    Effizienz-Betrachtungen
 74 |    Optionales "Copy On Write"
 75 |    Grundlegende Operationen
 76 |    Weitere Operationen im Überblick
 77 |    Umwandlung von/in arithmetische Werte
 78 |       `std::string` in numerischen Wert umwandeln
 79 |       Numerischen Wert in `std::string` umwandeln
 80 |    Ein- und Ausgabe
 81 |       Lesen mit `operator>>`
 82 |       Lesen mit `std::getline`
 83 | Library-Basics – IO-Streams
 84 |    Front-End der I/O-Streams
 85 |       Gemeinsame Schnittstelle
 86 |       Filestreams
 87 |       Stringstreams
 88 |    Back-End der I/O-Streams
 89 |    Zustands-Bits der I/O-Streams
 90 |       Verhalten der I/O-Streams abhängig vom Zustand
 91 |       Exceptions bei Zustandswechsel



=== 03_tuesday1.html ===

  2 | Sequenzielle Container
  3 |    Zusammenhängender Speicher
  4 |       Vorteile eines `std::vector`
  4 |       Einschränkungen eines `std::vector`
  5 |    Doppelt verkettete Listen
  6 |       Vorteile einer `std::list`
  6 |       Einschränkungen einer `std::list`
  7 |    Einfach verkettete Listen
  8 |       Vorteile einer `std::forward_list`
  8 |       Einschränkungen einer `std::forward_list`
  9 |    Deque
 10 | Iterator-Grundlagen
 11 |    Prinzip des Iterators
 12 |       Iterator *auf* Elemente zeigend
 13 |       Iterator *zwischen* Elemente zeigend
 14 |    Vorwärts-Iterator *auf* Elemente zeigend
 15 |    Vorwärts-Iterator *zwischen* Elemente zeigend
 16 |    Rückwärts-Iterator *auf* Elemente zeigend
 17 |    Rückwärts-Iterator *zwischen* Elemente zeigend
 18 |    *Alle* Elemente im Container
 19 |    *Teilbereich* eines Containers
 20 | Assoziative Container
 21 |    Kombination der Varianten
 22 |    Speicherverfahren Red-Black-Tree
 23 |    Speicherverfahren Hashing
 24 |       Prinzip des Hashing
 25 |       Behandlung von Kollisionen
 26 |       Re-Hashing
 27 | Iterator-Details
 28 |    Iterator für nur lesenden Zugriff
 29 |    Iterator für modifizierenden Zugriff
 30 |    Vorwärts laufender Iterator
 31 |    Rückwärts laufender Iterator
 32 |    Iterator-Position im leeren Container
 33 |    Index-basierter Zugriff
 34 |    Iteratoren für Assoziative Container
 35 |    Iteratoren für Maps
 36 |    Bereichsbasierte Schleifen für Maps
 37 | Praktikum



=== 04_tuesday2.html ===

  2 | Iterator-Kategorien
  3 |    Unidirektionale Iteratoren
  4 |    Bidirektionale Iteratoren
  5 |    Iteratoren mit wahlfreiem Zugriff
  6 |    Grenzprüfung bei Iteratoren mit wahlfreiem Zugriff
  7 | Konventionen der Iterator-Schnittstelle
  8 |    Iteratoren als verbindendes Element
  9 |    Container-Achse
 10 |    Algorithmen-Achse
 11 |    Input-Iterator
 12 |    Output-Iterator
 13 |    Erfolgreiche Suche
 14 |    Gescheiterte Suche
 15 |    Zustandsanzeige nach Füllen
 16 |    Löschungs-Anzeige durch neues (logisches) Ende
 17 | Iteratoren und Algorithmen
 18 |    Beispiel: Implementierung des `copy`-Algorithmus
 19 |       Kopieren der Elemente eines `std::set` in einen `std::vector`
 20 |       Anhängen an Vektoren
 20 |          Hilfsklasse: `back_insert_iterator`
 21 |          Hilfsfunktion: `back_inserter`
 22 |       Am Anfang oder Ende sequenzieller Container einfügen
 23 |       In assoziative Container einfügen
 23 |          Hilfsklasse: `insert_iterator`
 24 |          Hilfsfunktion: `inserter`
 25 |       Stream-Iteratoren
 25 |          In Stream schreiben mit `std::ostream_iterator`:
 26 |          Aus Stream lesen mit `std::istream_iterator`:
 27 |       Zeiger als Iteratoren
 27 |          Kopieren AUS klassischem Array
 28 |          Kopieren IN klassisches Array
 29 |       Kopieren zwischen unterschiedlichen Container-Typen
 30 |       Kopieren zwischen gleichartigen Container-Typen
 31 |    Einige typische Algorithmen in Beispielen
 31 |       Zählen der Elemente mit dem Wert 42
 32 |       Suchen des ersten Elements mit dem Wert 42
 33 |       Löschen aller Elemente mit dem Wert 42
 34 | Callbacks aus Algorithmen
 35 |    Generelle Möglichkeiten für Callbacks
 36 |    Callback mit Funktor
 37 |       Vergleich mit Funktion
 38 |       Lokale Daten in Funktoren
 39 |       Parameterübergabe an Funktor
 40 |       Parameter aus Aufrufumgebung
 41 |       Datentypen in Funktoren
 42 |    Callback mit Lambda
 42 |       Grundlegendes Beispiel mit Lambda
 43 |       Lambda mit Capture List
 44 |       Lambda mit privaten Daten
 45 |    C++14 Extensions to Lambdas
 46 |       C++14 `auto`-typed Lambda Arguments
 47 |       C++14 Lambda Init-Captures
 48 |       Extended Type Deduction for C++14 Lambdas
 49 |       Init-Captures and Move-Construction
 50 |       C++14 Init-Capture Pitfalls
 51 |    Prädikate für Algorithmen (generell)
 52 |       Möglichkeiten zur Übergabe von Prädikaten
 53 |       Prädikat mit Funktionszeiger übergeben
 54 |       Prädikat mit Funktor übergeben
 55 |       Prädikat mit C++11-Lambda übergeben
 55 |       Alternative mit Standard-Bibliotheksfunktion
 56 |    Prädikate für Algorithmen (Beispielserie)
 57 |       Prädikat mit spezifischem Funktionszeiger
 58 |       Prädikat mit spezifischem Funktor
 59 |       Prädikat mit spezifischem Lambda
 60 |       Prädikat mit allgemeiner verwendbarem Funktor
 61 |       Prädikat mit Funktor und Zugriff auf lokalen Kontext
 62 |       Prädikat mit Lambda und Zugriff auf lokalen Kontext
 63 |    Algorithmen vs. spezifische Member-Funktionen
 64 |       Beispiel: Elemente Entfernen mit Member-Funktion
 65 |       Beispiel: Callbacks aus Member-Funktion (1)
 66 |       Beispiel: Callbacks aus Member-Funktion (2)
 67 |       Beispiel: Zusammen mit Objekten definierte Callbacks
 68 |       Beispiel: Container-Varianten per Typ-Definition
 69 |    Anwendung von Callbacks (Zusammenfassung 1)
 70 |    Anwendung von Callbacks (Zusammenfassung 2)
 71 | Praktikum



=== 05_wednesday1.html ===

  2 | Beziehungen zwischen Klassen
  3 |    Klasse (minimal)
  4 |       Objektorientierte Vorgehensweise
  5 |    Klassen vs. Objekte
  5 |       Klassen
  5 |       Objekte
  6 |       Klassen und Objekte in C++
  7 |       C++-Klassen als Compilezeit-Konstrukt
  8 |    Klasse (detailiert)
  9 |       Attribute
 10 |       Methoden
 11 |       Zugriffsschutz
 12 |       C++ Zugriffsschutz: `class` vs. `struct`
 13 |       Klassen-Attribute und -Methoden
 13 |          Klassen-Attribute
 13 |          Klassen-Methoden
 14 |    Parametrisierte Klasse
 15 |    Assoziation
 16 |    Ungerichtete Assoziation in C++
 16 |       Beispiel-Code zur ungerichteten Assoziation
 17 |    Gerichtete Assoziation
 17 |       Beispiel-Code zur gerichteten Assoziation
 18 |    Komposition
 18 |       Beispiel-Code zur Komposition
 19 |    Aggregation
 20 |       Beispiel-Code zur Aggregation
 21 |    Vererbung
 22 |    Mehrfachvererbung
 23 |    Interface (Schnittstelle)
 24 |       Anwendung von Interfaces
 25 |       Interfaces vs. Klassen
 26 |    Abstrakte Basisklasse
 27 |    "Rautenförmige" Vererbungsstruktur
 28 |    Mehrstufige Vererbung allgemein gesehen
 29 | Mehrfachvererbung und virtuelle Basisklassen
 30 |    Prinzip der Mehrfachvererbung
 31 |    Virtuelle Basisklassen
 32 |    Überlappende Basisklassen
 33 |    Rautenförmige Ableitungshierarchien
 34 |       UML-Darstellung «overlapping»
 35 |       UML-Darstellung «disjoint»
 36 |       Abbildung auf Speicher `«overlapping»`
 37 |       Abbildung auf Speicher `«disjoint»`
 38 |    Quelltext und C'tor-/D'tor-Ablauf bei `«overlapping»`
 39 |    Quelltext und C'tor-/D'tor-Ablauf bei `«disjoint»`
 40 | Beispiele zu Klassenbeziehungen
 41 |    Eine (anpassbare) Komponente
 42 |    Nutzung der (angepassten) Komponente
 43 |    Rautenförmige (Mehrfach-) Vererbung
 44 |    Drei Interfaces
 45 |    Inkrementale Erweiterbarkeit durch Mix-Ins
 46 |    Orientiert am GoF *Observer Muster*
 47 | Praktikum



=== 06_wednesday2.html ===

  2 | Generalisiertes Ausführungsmodell
  3 |    CPU und Speicher
  4 |       CPU-Aufbau (Grundlegendes)
  4 |          Program Counter und Stack Pointer
  5 |          Ausdehnung des Stack-Bereichs
  6 |       CPU-Aufbau (Details)
  7 |          ALU (Arithmetic Logic Unit)
  8 |          (Weitere) Register
  9 |          Datenpfad-Steuerung
 10 |       Stack-Daten
 11 |       Globale Daten
 12 |       Dynamisch verwaltete Daten
 13 |    Stack-Frames
 14 |       Detailablauf beim Unterprogramm-Aufruf
 15 |          Argumente bereitstellen
 16 |          Maschinenbefehl zum Unterprogrammsprung
 17 |          Aufrufkonventionen (Calling Conventions)
 18 |          Erzeugen von Stack-Backtraces
 19 |          Platz für lokale Variable schaffen
 20 |          Aufrufargumente und lokale Variable
 21 |       Details bei der Unterprogramm-Rückkehr
 22 |          Bereitstellung des Rückgabewerts
 23 |          Rücksprung zum Aufrufer
 24 |    Dynamische Speicherverwaltung
 24 |       Speicheranforderung
 25 |       Dynamische Speicherfreigabe
 26 |       Typische Fehlerquellen bei dynamischem Speicher
 27 |    Stack-Limit
 28 |       Stack-Limit mit speziellen CPU-Registern überwachen
 29 |       Stack-Limit mit nicht zugeordneter Speicherseite überwachen
 30 |       Probleme mit Stack-Limit durch sicheren Code vermeiden
 31 |       Probleme mit Stack-Limit durch statische Analyse ausschließen
 32 | Abbildung von Klassen
 33 |    Abbildung von Member-Daten
 34 |       Padding und Alignment
 35 |          Padding zwischen Strukturelementen
 36 |          Padding nach dem letzten Strukturelement (Trugschluss)
 37 |          Padding nach dem letzten Strukturelement (Notwendigkeit)
 38 |    Abbildung von Member-Funktionen
 39 |       Reguläre vs. Inline-Member-Funktionen
 40 |       Inline Member-Funktionen
 41 |       Nicht-Inline Member-Funktionen
 42 |       Nachteile von Inline-Funktionen
 43 |    Öffentliche Basisklassen
 44 |    Private Basisklassen
 45 |    Komposition über Member-Daten
 46 |       Vergleich: Komposition über Member-Daten
 47 |       Vergleich: Komposition über private Basisklasse
 48 |          Erweiterungspunkte in Basisklassen
 49 |          Nutzung der Erweiterungspunkte
 50 | Techniken zur Implementierung von Containern
 51 |    Auf Vererbung basierende Technik
 52 |       "Freundschaft" eng gekoppelter Klassen
 53 |       Container-Elemente mit Daten
 54 |       Daten-Elemente als Templates
 55 |       Datenelemente erzeugen und einfügen
 56 |       Template-Helfer-Funktionen
 57 |       Datenelemente entnehmen
 58 |          Datenelemente verwendbar machen mit `dynamic_cast` auf Zeigerbasis
 59 |          Datenelemente verwendbar machen mit `dynamic_cast` auf Referenzbasis
 60 |    Memory Leaks
 61 |       Verantwortlichkeit für die Speicherverwaltung
 62 |       Speicherfreigabe über Zeiger auf Basisklassen
 63 |    Auf Templates basierende Technik
 64 |       Template für Klasse der Datenelemente
 65 |       Operation zum Einfügen neuer Datenelemente
 66 |       Operation zur Entnahme von Datenelemente
 67 |       Destruktor der Container-Klasse
 68 |       Typsicherheit beim Einfügen
 69 |       Typsicherheit beim Entnehmen
 70 |       Slicing als Nachteil der Templates
 71 |    Template-Technik mit explizitem Polymorphismus
 72 |          Entnahme von Basisklassen-Zeigern
 73 |          Ermittlung der abgeleiteten Klasse
 74 |       Pointer in auf Templates basierenden Containern
 75 | Typ-Bestimmung zur Laufzeit
 76 |    RTTI-Voraussetzungen
 77 |    Dynamischer Polymorphismus
 78 |       Zweck des dynamischen Polymorphismus
 79 |       Implementierung des dynamischen Polymorphismus
 80 |       Kombination von `virtual` und `inline`
 81 |    Explizites RTTI
 82 |       RTTI mit dynamischem Cast
 82 |          `dynamic_cast` auf Zeigerbasis
 83 |       RTTI mit dynamischem Cast (2)
 83 |          `dynamic_cast` auf Referenzbasis
 84 |    Implementierung von explizitem RTTI
 85 | Typbasierte Verzweigungen
 86 |    Typ-Gesteuerter Kontrollfluss
 87 |    Alternative mit virtuellen Funktionen
 88 | Praktikum



=== 07_thursday1.html ===

  2 | Templates selbst schreiben
  3 |    Template-Klassen
  4 |    Template-Funktionen
  5 | Optimierung von Templates
  6 |    Ursache für "Code-Bloat"
  7 |    Vorbereitender Zwischenschritt
  8 |    Optimierte Template
  9 | Perfect Forwarding with Templates
 10 |    Perfect Forwarding - Cookbook Style
 11 |    Perfect Forwarding - The Background
 12 | Templates als Compilezeit-Funktionen
 13 |    Wiederholung und Verzweigung
 14 |    Fakultäts-Funktion als Beispiel
 14 |       Der übliche Ansatz …
 15 |       … und der im "Haskell-Stil"
 16 |       Berechnung mit C++-Template
 17 |    Beispiele für Typ-Transformationen
 17 |       Eine Zeigerstufe hinzufügen
 17 |       Eine Zeigerstufe wegnehmen
 17 |       Alle Zeigerstufen wegnehmen
 18 |    Type-Traits Library
 19 |       Using SFINAE with `std::enable_if`
 20 |       Example for SFINAE with `std::enable_if` (C++11)
 21 |       Example for SFINAE with `std::enable_if_t` (C++14)
 22 | Variadic Templates
 23 |    Defining Variadic Templates
 24 |       Example: Variadic Template Class
 25 |       Example: Variadic Template Function
 26 |       Implementing Variadic Templates
 27 |    Unpacking Parameter Packs
 28 |       Example: Compile Time Recursive Data Structure
 29 |       Example: Compile Time Recursive Functions
 30 |       Example: Stopping Recursion with SFINAE
 31 |       Simultaneous Unpacking of Parameter Packs
 32 |       C++14 `std::integer_sequence` Template
 33 | Fortgeschrittene Nutzung des Präprozessors
 34 |    Der Präprozessor kennt kein C(++)
 35 |    Stringizing
 36 |    Token Pasting
 37 |    Systematische Quelltexterzeugung
 37 |       "Tabelle" als Vorbereitung
 38 |       Eigentliche Quelltexterzeugung
 39 |    Einige weitere Präprozessor-Tipps
 40 |       Fortsetzungszeilen fördern die Lesbarkeit
 41 |       Namenskonventionen für Makros
 42 |       Makros nur lokal definieren
 43 |          Beispiel für lokalen Makro
 44 | Praktikum



=== 08_thursday2.html ===

  2 | Richtlinien für den Exception-Einsatz
  3 |    (Keine) isolierte Klassenhierarchie
  4 |    (Falsche) Behandlungsblock-Abfolge
  5 |    Sub-optimale Weiterleitung
  6 |       Optimale Weiterleitung
  7 |       Mögliche Optimierungen durch den Compiler
  8 |    (Keine) Exceptions aus Destruktoren werfen
  9 | c++98 `throw`-Spezifikationen
 10 | C++11 `noexcept`-Spezifikation
 11 |    Bedingte Exception-Freiheit
 12 |    Beispiele zu `noexcept`
 13 | Ressourcen ohne und mit RAII
 14 |    Klassische APIs
 15 |       Um welche Ressourcen geht es?
 16 |       Wie werden Ressourcen repräsentiert?
 17 |    Mit RAII verwaltete Ressourcen
 18 |    RAII-Ressource für Anweisungsfolge belegen
 19 |    RAII-Ressource für Objekt-Lebensspanne belegen
 20 |       Explizite Anforderung mehrerer Ressourcen ohne RAII
 20 |          Beispiel-Code für Klasse – kein RAII
 21 |          Beispiel-Code `Choice`-Konstruktor – kein RAII
 22 |          Beispiel-Code `Choice`-Destruktor – kein RAII
 23 |       Anforderung mehrerer Ressourcen mit RAII
 24 |          Beispiel-Code Vereinfachung `Choice`-Klasse – mit RAI
 25 | Smart-Pointer
 26 |    Smart-Pointer von C++11 im Vergleich
 27 |       Exklusive Eigentümerschaft: `std::unique_ptr`
 28 |       Geteilte Eigentümerschaft: `std::shared_ptr`
 29 |    Problem der zyklischen Referenzierung
 30 |       Nutzer ohne Eigentümerschaft: `std::weak_ptr`
 31 |       "Verlorene" Ressourcen
 32 |    Typische Smart-Pointer Implementierungen
 32 |       `std::shared_ptr` – meist verwendete Variante
 33 |       `std::shared_ptr` – alternative Implementierung
 33 |       `std::weak_ptr` – typische Implementierung
 33 |       `std::unique_ptr` – typische Implementierung
 34 | Praktikum



=== 09_friday1.html ===

  2 | Pragmatische Leitgedanken zur Software-Entwicklung
  3 |    "Open Close"-Prinziple
  4 |       Mechanismen zur Strukturierung
  4 |          Klassen
  4 |          Unterprogramme
  4 |          Bibliotheken
  5 |       Mechanismen zur Strukturierung (2)
  5 |          Frameworks
  5 |          Geplante Erweiterbarkeit
  6 |    Don't Repeat Yourself
  7 |       Mechanismen zur Wiederverwendung
  7 |          Klassen
  7 |          Unterprogramme
  7 |          Datenstrukturen
  8 | C++ as Multi-Paradigm Language
  9 |    Choosing the Right Paradigm
 10 |    How to Recognize that Things Start to Go Wrong?
 11 | Design Patterns – Critically Reviewed
 12 |    The GoF Book
 13 |       Design Patterns and the GoF Book – A Personal Opinion
 14 |       Shortcomings of the GoF Book Implementations
 15 |    Design Patterns and OOP-Languages
 16 |    DP-Examples
 17 |       DP-Example: Iterator
 18 |       DP-Example: Observer
 19 |       DP-Example: Composite
 20 |       DP-Example: Template-Method
 21 |       DP Template-Methode Implementation Alternatives
 22 |          DP Template Method Pattern Based on virtual Member Functions
 23 |          DP Template Method Pattern Based on C++-Templates
 24 |       DP-Example: State
 25 |       DP-Example: Singleton
 26 |    Design Patterns – Closing Remark
 27 | Summary and Epilogue
